image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: preventis.io/translationApi

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
- mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
- ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
- cd $GOPATH/src/$REPO_NAME

stages:
- test
- build
- build_docker

format:
  stage: test
  script:
  # get dependency manager
  - go get -u github.com/golang/dep/cmd/dep
  # fetch dependencies
  - dep ensure
  - go fmt $(go list ./... | grep -v /vendor/)
  - go vet $(go list ./... | grep -v /vendor/)
  - go test -race $(go list ./... | grep -v /vendor/)
  tags:
  - docker
  artifacts:
    paths:
    - vendor
    expire_in: 1 hour

compile:
  stage: build
  script:
  - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/bin
  tags:
  - docker
  artifacts:
    paths:
    - bin
    expire_in: 1 week

dockerize:
  stage: build_docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
  - mkdir -p /root/.docker
  - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /root/.docker/config.json
  - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  only:
  - master
  tags:
  - docker
